"DO NOT FORGET BASIC COMPONENTS OR ELEMENTS"

HTML



<body>
 <h1 id="title">Doping in Professional Bicycle Racing</h1>
<div id="window">
 
    
  </div>

  <div id="barchartProyect"> </div>
</body>


CSS

#barchartProyect{
 display: flex;
  justify-content: center;
  align-items: center;
  height: 50%;
}
h1{
  text-align:center
}
div.tooltip {
  position: absolute;

  padding: 10px;
  font: 12px sans-serif;
  background: lightsteelblue;
  border: 0px;
  border-radius: 8px;
  pointer-events: none;
}

JS

d3.json('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json')

.then((data) => {
  
    var div = d3
  .select("#barchartProyect")
  .append('div')
  .attr('class', 'tooltip')
  .attr('id', 'tooltip')
  .style('opacity', 0);
  var dopConf= d3.scaleOrdinal(d3.schemeDark2);
  var timeFormat = d3.timeFormat('%M:%S');
   data.forEach(function (d) {
      d.Place = +d.Place;
      var parsedTime = d.Time.split(':');
      d.Time = new Date(1970, 0, 1, 0, parsedTime[0], parsedTime[1]);
    });
 const w = 920;
    const h = 700;
    const padding = 60;

    const xScale = d3.scaleLinear()
                     .domain([ d3.min(data, (d) => d.Year-1), d3.max(data, (d) => d.Year)])
    .range([padding, 800 ]);
                   

    const yScale = d3.scaleTime()
                     .domain([d3.min(data, (d) => d.Time), d3.max(data, (d) => d.Time)])
    .range([639,60]);
                    
 
  
  
   const svg = d3.select("#barchartProyect")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);
  
  
   svg
      .append('text')
      .attr('transform', 'rotate(-90)')
      .attr('x', -200)
      .attr('y', 20)
      .style('font-size', 18)
      .text('Time in Minutes');
  
  
    svg
      .append('text')
      .attr('transform', 'rotate(0)')
      .attr('x', 700)
      .attr('y', 670)
      .style('font-size', 18)
      .text('Years');
  
  svg
      .selectAll('.dot')
      .data(data)
      .enter()
      .append('circle')
      .attr('class', 'dot')
      .attr('r', 6)
      .attr('cx', function (d) {
        return xScale(d.Year);
      })
      .attr('cy', function (d) {
        return yScale(d.Time);
    
      })
   .attr("data-xvalue", (d, i) => {
          return d.Year;
        })
        .attr("data-yvalue", (d, i) => {
          return d.Time;
        })
    .style('fill', function (d) {
        return dopConf(d.Doping !== '');
      }) 
 
  
  
   .on('mouseover', function (item, d) {
     div.style('opacity', 0.9);
   div.attr("data-year",  d.Year) 
     
         div.html (
           "Name: " + d.Name+"<br/>" +"Time: "+d.Time.toString().split("").splice(19,5).join("")+"<br/>"+d.Year+"<br/>"+
            d.Doping+"<br/>"+d.URL
          )
     .style('left', event.pageX + 'px')
          .style('top', event.pageY - 28 + 'px');
  })
    .on('mouseout', function () {
        div.style('opacity', 0);
      })
 
        

         
          
        
 
  

  
  
      const xAxis = d3.axisBottom(xScale).tickFormat(d3.format('d'));
    
    const yAxis = d3.axisLeft(yScale).tickFormat(timeFormat);
  
      svg.append("g")
       .attr("transform", "translate(0," + (h - padding) + ")")
       .call(xAxis)
  .attr('id','x-axis');
    svg.append("g")
       .attr("transform", "translate(" + padding + ",0)")
       .call(yAxis)
   .attr('id','y-axis');
  
     var legendContainer = svg.append('g').attr('id', 'legend');

    var legend = legendContainer
      .selectAll('#legend')
      .data(dopConf.domain())
      .enter()
      .append('g')
      .attr('class', 'legend-label')
      .attr('transform', function (d, i) {
        return 'translate(0,' + (h / 2 - i * 20) + ')';
      });

    legend
      .append('rect')
      .attr('x', w - 18)
      .attr('width', 18)
      .attr('height', 18)
      .style('fill', dopConf);

    legend
      .append('text')
      .attr('x', w - 24)
      .attr('y', 9)
      .attr('dy', '.35em')
      .style('text-anchor', 'end')
      .text(function (d) {
        if (d) {
          return 'Riders with doping allegations';
        } else {
          return 'No doping allegations';
        }
      });

})

  .catch((e) => console.log(e));




    

 



   
